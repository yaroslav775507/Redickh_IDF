Вы работаете Junior Java разработчиком в банке. Поступает следующая задача от
руководителя:
Требуется разработать прототип микросервиса, без разграничений доступа к API, который
будет интегрирован в существующую банковскую систему. Микросервис должен:
1. Получать информацию о каждой расходной операции в тенге (KZT), рублях (RUB)
и других валютах в реальном времени и сохранять ее в своей собственной базе
данных (БД);
2. Хранить месячный лимит по расходам в долларах США (USD) раздельно для двух
категорий расходов: товаров и услуг. Если не установлен, принимать лимит равным
1000 USD;
3. Запрашивать данные биржевых курсов валютных пар KZT/USD, RUB/USD по
дневному интервалу (1day/daily) и хранить их в собственной базе данных. При
расчете курсов использовать данные закрытия (close). В случае, если таковые
недоступны на текущий день (выходной или праздничный день), то использовать
данные последнего закрытия (previous_close);
4. Помечать транзакции, превысившие месячный лимит операций (технический флаг
limit_exceeded);
5. Дать возможность клиенту установить новый лимит. При установлении нового
лимита микросервисом автоматически выставляется текущая дата, не позволяя
выставить ее в прошедшем или будущем времени. Обновлять существующие
лимиты запрещается;
6. По запросу клиента возвращать список транзакций, превысивших лимит, с
указанием лимита, который был превышен (дата установления, сумма лимита,
валюта (USD)).



Архитектурное проектирование:
Определить структуру микросервиса.
Выбрать технологии для реализации (например, Spring Boot для Java-приложений).
Разработать схему базы данных для хранения информации о расходных операциях, лимитах и курсах валют.
Разработка и настройка микросервиса:
Создать Java-приложение с использованием выбранных технологий.
Настроить связь с базой данных для сохранения информации.
Настроить механизмы для получения данных о расходных операциях и биржевых курсах валют.
Реализовать логику по расчету превышения лимита и пометке транзакций.
Реализация функциональности:
Реализовать функции для получения информации о расходных операциях в реальном времени и их сохранении в базе данных.
Реализовать логику учета месячного лимита по расходам в USD для товаров и услуг.
Реализовать запрос данных биржевых курсов валютных пар и их хранение в базе данных.
Реализовать механизм установки нового лимита с проверкой корректности даты и обновление существующих лимитов.
API-интерфейс:
Определить структуру API для взаимодействия с микросервисом.
Реализовать методы API для получения списка транзакций, превысивших лимит, и установки нового лимита.
Тестирование:
Написать модульные тесты для проверки корректности работы различных функций и методов API.
Провести интеграционное тестирование для проверки взаимодействия с другими компонентами системы.
Документация:
Написать документацию к API и инструкцию по установке и запуску микросервиса.
Деплой и мониторинг:
Задеплоить микросервис в среду исполнения.
Настроить мониторинг работы микросервиса для отслеживания его состояния и производительности.
Дальнейшее развитие:
Планировать возможные улучшения и дополнительную функциональность микросервиса на основе обратной связи от пользователей и требований системы.